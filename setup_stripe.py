#!/usr/bin/env python3
"""
Stripe Business Account Setup Assistant
Interactive script to help configure Stripe for your basketball analysis service
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create .env file with Stripe configuration"""
    print("🏀 Basketball Analysis Service - Stripe Setup")
    print("=" * 50)
    
    # Check if .env already exists
    env_path = Path('.env')
    if env_path.exists():
        response = input("⚠️  .env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("Setup cancelled.")
            return
    
    print("\n📋 Please provide your Stripe configuration:")
    print("(You can find these in your Stripe Dashboard → Developers → API keys)")
    print()
    
    # Gather Stripe keys
    stripe_publishable = input("🔑 Stripe Publishable Key (pk_test_... or pk_live_...): ").strip()
    if not stripe_publishable.startswith(('pk_test_', 'pk_live_')):
        print("❌ Invalid publishable key format. Should start with pk_test_ or pk_live_")
        return
    
    stripe_secret = input("🔐 Stripe Secret Key (sk_test_... or sk_live_...): ").strip()
    if not stripe_secret.startswith(('sk_test_', 'sk_live_')):
        print("❌ Invalid secret key format. Should start with sk_test_ or sk_live_")
        return
    
    # Check if test or live mode
    is_live = stripe_publishable.startswith('pk_live_')
    mode = "LIVE" if is_live else "TEST"
    print(f"\n✅ Detected {mode} mode")
    
    if is_live:
        confirm = input("⚠️  You're using LIVE keys. Are you sure? (y/N): ")
        if confirm.lower() != 'y':
            print("Setup cancelled. Use test keys for development.")
            return
    
    # Optional webhook secret
    webhook_secret = input("🪝 Webhook Secret (whsec_... - optional, press Enter to skip): ").strip()
    
    # Frontend URL
    if is_live:
        frontend_url = input("🌐 Your domain (e.g., https://yourdomain.com): ").strip()
    else:
        frontend_url = input("🌐 Frontend URL (default: http://localhost:3000): ").strip()
        if not frontend_url:
            frontend_url = "http://localhost:3000"
    
    # Email configuration
    print("\n📧 Email Configuration (for subscription notifications)")
    email_server = input("📬 SMTP Server (default: smtp.gmail.com): ").strip()
    if not email_server:
        email_server = "smtp.gmail.com"
    
    email_port = input("🔌 SMTP Port (default: 587): ").strip()
    if not email_port:
        email_port = "587"
    
    email_username = input("👤 Email Username: ").strip()
    email_password = input("🔒 Email Password (use app password for Gmail): ").strip()
    email_sender = input("📮 Default Sender Email: ").strip()
    
    # Create .env content
    env_content = f"""# Basketball Analysis Service Configuration
# Generated by Stripe setup assistant

# Stripe Configuration ({mode} MODE)
STRIPE_PUBLISHABLE_KEY={stripe_publishable}
STRIPE_SECRET_KEY={stripe_secret}
{f"STRIPE_WEBHOOK_SECRET={webhook_secret}" if webhook_secret else "# STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret_here"}

# Application Settings
SECRET_KEY=your-super-secret-key-change-this-in-production
FLASK_ENV={"production" if is_live else "development"}
FLASK_DEBUG={"False" if is_live else "True"}
FRONTEND_URL={frontend_url}

# Email Configuration
MAIL_SERVER={email_server}
MAIL_PORT={email_port}
MAIL_USE_TLS=True
MAIL_USERNAME={email_username}
MAIL_PASSWORD={email_password}
MAIL_DEFAULT_SENDER={email_sender}

# Database Configuration
DATABASE_URL=sqlite:///basketball_analysis.db

# Redis Configuration (for production scaling)
REDIS_URL=redis://localhost:6379/0

# Video Processing Settings
MAX_VIDEO_SIZE_MB=100
PROCESSING_TIMEOUT_SECONDS=300
MAX_CONCURRENT_PROCESSING=10

# Analytics (optional)
# GOOGLE_ANALYTICS_ID=your_ga_id
# MIXPANEL_TOKEN=your_mixpanel_token
"""
    
    # Write .env file
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print(f"\n✅ .env file created successfully!")
    print(f"📁 Location: {env_path.absolute()}")
    print()
    print("🚀 Next Steps:")
    print("1. Review your .env file and adjust any settings")
    print("2. Set up webhooks in your Stripe dashboard:")
    print(f"   - Endpoint URL: {frontend_url}/webhook/stripe")
    print("   - Events: checkout.session.completed, customer.subscription.*")
    print("3. Test your integration with Stripe test cards")
    print("4. Start your application and verify payment flows")
    print()
    print("📚 For detailed setup instructions, see: STRIPE_BUSINESS_SETUP.md")

def check_requirements():
    """Check if required packages are installed"""
    required_packages = ['stripe', 'flask', 'python-dotenv']
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print("❌ Missing required packages:")
        for package in missing_packages:
            print(f"   - {package}")
        print(f"\nInstall with: pip install {' '.join(missing_packages)}")
        return False
    
    return True

def test_stripe_connection():
    """Test Stripe API connection"""
    try:
        import stripe
        from dotenv import load_dotenv
        
        # Load environment variables
        load_dotenv()
        
        # Get Stripe key
        stripe_key = os.getenv('STRIPE_SECRET_KEY')
        if not stripe_key:
            print("❌ STRIPE_SECRET_KEY not found in environment")
            return False
        
        # Set Stripe key
        stripe.api_key = stripe_key
        
        # Test API call
        print("🧪 Testing Stripe connection...")
        account = stripe.Account.retrieve()
        
        print(f"✅ Connected to Stripe successfully!")
        print(f"📊 Account ID: {account.id}")
        print(f"🏢 Business Name: {account.business_profile.name if account.business_profile else 'Not set'}")
        print(f"🌍 Country: {account.country}")
        print(f"💳 Charges Enabled: {account.charges_enabled}")
        print(f"💰 Payouts Enabled: {account.payouts_enabled}")
        
        return True
        
    except ImportError:
        print("❌ Stripe package not installed. Run: pip install stripe")
        return False
    except Exception as e:
        print(f"❌ Stripe connection failed: {e}")
        return False

def main():
    """Main setup function"""
    print("🏀 Basketball Analysis Service - Stripe Business Setup")
    print("=" * 60)
    print()
    
    while True:
        print("Choose an option:")
        print("1. 🔧 Create/Update .env configuration")
        print("2. 📦 Check required packages")
        print("3. 🧪 Test Stripe connection")
        print("4. 📚 View setup guide")
        print("5. 🚪 Exit")
        print()
        
        choice = input("Enter your choice (1-5): ").strip()
        
        if choice == '1':
            create_env_file()
        elif choice == '2':
            if check_requirements():
                print("✅ All required packages are installed!")
            else:
                print("❌ Some packages are missing. Please install them first.")
        elif choice == '3':
            test_stripe_connection()
        elif choice == '4':
            print("📚 Please see STRIPE_BUSINESS_SETUP.md for detailed instructions")
        elif choice == '5':
            print("👋 Setup complete! Good luck with your basketball analysis service!")
            break
        else:
            print("❌ Invalid choice. Please enter 1-5.")
        
        print("\n" + "-" * 60 + "\n")

if __name__ == "__main__":
    main()
